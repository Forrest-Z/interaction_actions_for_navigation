#!/usr/bin/env python
from matplotlib import pyplot as plt
import numpy as np
from pose2d import Pose2D, apply_tf, apply_tf_to_pose, inverse_pose2d, posemsg_to_pose2d
from pyniel.ros_tools.rosbag_end_detector import RosbagEndDetector
import rospy
import tf
from tf2_ros import TransformException

FIXED_FRAME = "gmap"
ROBOT_FRAME = "base_footprint"

class Evaluator(object):
    def __init__(self):
        rospy.init_node('ttg_live_eval')
        self.goalmsg = None
        self.start_dtg = None
        self.start_p2d = None
        self.smallest_dtg = None
        self.history = []
        self.print_log = []
        # Params
        self.kRobotRadius = rospy.get_param("/robot_radius", 0.3)
        # 1 - Node Init
        self.tf_listener = tf.TransformListener()
        # 2 - Subscribers now active
        from geometry_msgs.msg import PoseStamped
        rospy.Subscriber("/move_base_simple/goal", PoseStamped, self.goal_callback, queue_size=1)
        rospy.Timer(rospy.Duration(0.1), self.dtg_routine)
        # 3 - End detector active
        self.rosbag_end_detector = RosbagEndDetector(self.rosbag_end_callback)
        # 4 - Spin (waits)
        rospy.spin()

    def goal_callback(self, msg):
        p2d_robot_in_fix = np.zeros((3,))
        dtg = self.distance_to_goal(msg, msg.header.stamp,
                                    store_p2d_robot_in_fix=p2d_robot_in_fix, warnings=True)
        if dtg is None:
            rospy.logwarn("Could not set goal.")
            return
        # log
        self.log_finished_run()
        # store for later
        self.goalmsg = msg
        self.start_dtg = dtg
        self.start_p2d = p2d_robot_in_fix
        self.smallest_dtg = np.inf
        # print
        rospy.logwarn("Goal set.")

    def log_finished_run(self, extra_message=''):
        if self.goalmsg is not None:
            # store previous goal info
            ttg = None
            if self.smallest_dtg <= self.kRobotRadius:
                ttg = rospy.Time.now() - self.goalmsg.header.stamp
                self.is_reached = True
            self.history.append((self.start_p2d, self.goalmsg, self.start_dtg, ttg))
            self.print_log.append("Finished run: Start dtg: {} - Smallest dtg: {} [m] {}".format(
                self.start_dtg, self.smallest_dtg, extra_message))
        else:
            self.print_log.append("Finished run: No goal set")

    def dtg_routine(self, event=None):
        if self.goalmsg is None:
            return
        dtg = self.distance_to_goal(self.goalmsg, rospy.Time.now(), warnings=False)
        if dtg is None:
            return
        if dtg <= self.smallest_dtg:
            self.smallest_dtg = dtg

    def distance_to_goal(self, goalmsg, time, store_p2d_robot_in_fix=None, warnings=True):
        if store_p2d_robot_in_fix is None:
            store_p2d_robot_in_fix = np.zeros((3,))
        msg_in_fixed = self.wait_for_tf(FIXED_FRAME, goalmsg.header.frame_id, time, warnings=warnings)
        robot_in_fixed = self.wait_for_tf(FIXED_FRAME, ROBOT_FRAME, time, warnings=warnings)
        if msg_in_fixed is None or robot_in_fixed is None:
            if warnings:
                print(msg_in_fixed, robot_in_fixed)
            return None
        p2d_goal_in_fix = apply_tf_to_pose(posemsg_to_pose2d(goalmsg.pose), msg_in_fixed)
        store_p2d_robot_in_fix[:] = robot_in_fixed
        dtg = np.linalg.norm(p2d_goal_in_fix[:2] - store_p2d_robot_in_fix[:2])
        return dtg

    def rosbag_end_callback(self):
        self.log_finished_run(extra_message="(interrupted by rosbag end.)")
        print("Rosbag end/pause detected!")
        for message in self.print_log:
            print(message)
        rospy.signal_shutdown("no error.")

    def wait_for_tf(self, parent, child, time, tf_timeout=None, warnings=True):
        if tf_timeout is None:
            tf_timeout = rospy.Duration(0.1)
        try:
            tf_info = [parent, child, time]
            self.tf_listener.waitForTransform(*(tf_info + [tf_timeout]))
            tf_child_in_parent = self.tf_listener.lookupTransform(*tf_info)
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException,
                TransformException) as e:
            if warnings:
                print("[{}.{}] tf to refmap frame for time {}.{} not found: {}".format(
                    rospy.Time.now().secs, rospy.Time.now().nsecs, time.secs, time.nsecs, e))
            return None
        pose2d_child_in_parent = Pose2D(tf_child_in_parent)
        return pose2d_child_in_parent


if __name__ == "__main__":
    ev = Evaluator()
