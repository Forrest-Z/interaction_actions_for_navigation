<?xml version="1.0"?>
<launch>

  <arg name="mapname" default="asl_office_j" />
  <arg name="mapfolder" default="$(env HOME)/maps"/>
  <arg name="script_args" default="--hz"/>
  <arg name="n_downsampling_passes" default="3"/>
  <arg name="localization" default="true"/>
  <arg name="is_simulation" default="true"/> <!-- $(eval 'simulator' in arg('rosbag') or 'multiagent_sim' in arg('rosbag')) -->
  <arg name="dr_spaam_start" default="false"/>

 <?ignore List of possible arguments and a description for these! 
    parser.add_argument('--realtime', action='store_true', help='Have the simulator run as close to real-time as possible',)
    # Input source
    sourcegroup = parser.add_mutually_exclusive_group()
    # default input is through step(actions) function
    sourcegroup.add_argument('--autopilot', action='store_true', help='drive robot internally, rather than listening to cmd_vel',)
    sourcegroup.add_argument('--cmd_vel', action='store_true', help='drive robot through cmd_vel topic',)
    # Output to ros
    parser.add_argument('--force-publish-ros', action='store_true', 
            help="""By default the training script enables the no-ros argument in the
            environment. force-publish-ros restores the environment's default ros behavior.""")
    parser.add_argument('--no-ros', action='store_true', help='disable ros',)
    parser.add_argument('--no-goal', action='store_true', help='dont publish goals for agent 0',)
    parser.add_argument('--naive-plan', action='store_true', help='Bypass ia planning for agents.',)
    parser.add_argument('--plan-async', action='store_true', help='Bypass ia planning for agents.',)
    parser.add_argument('--no-stop', action='store_true', help='hot start (DANGER)',)
    parser.add_argument('--shutdown-on-success', action='store_true', help='stop simulation if goal is reached',)
    parser.add_argument('--max-runtime', type=float, default=np.inf, help='max simulation runtime',)
    parser.add_argument('--delay-start', action='store_true', help='delay start',)
    parser.add_argument('--pre-step-once', action='store_true', help="""
                        move-base refuses to register goal until it has received data.
                        this is a hack to get it running.""",)
    parser.add_argument('--verbose', action='store_true', help='print more information',)
    parser.add_argument('--dt', type=float, default=0.2, help='simulation time increment')
  ?>

  <!-- (Adapted from Move base planner) -->
  <arg name="ia_downsampling_passes" default="3"/> <!-- 1 -->
  <arg name="scenario" default="officegroups"/> <!-- officegroups // aslguards // aslquiet. Not working?: aslbusy // aslgates // aslgroups // asliros1 // asltrap -->
  
<!-- Other scenarios: 
aslbusy.pickle    irosasl4.pickle           irosunity_scene_map1.pickle
aslgates.pickle   irosasl5.pickle           irosunity_scene_map2.pickle
aslgroups.pickle  irosasl6.pickle           irosunity_scene_map3.pickle
aslguards.pickle  irosasl_office_j1.pickle  irosunity_scene_map4.pickle
aslquiet.pickle   irosasl_office_j2.pickle  irosunity_scene_map5.pickle
asltrap.pickle    irosasl_office_j3.pickle  irosunity_scene_map6.pickle
irosasl1.pickle   irosasl_office_j4.pickle  officegroups.pickle
irosasl2.pickle   irosasl_office_j5.pickle  scenarios.txt
irosasl3.pickle   irosasl_office_j6.pickle  unitytest.pickle -->

  <arg name="max_runtime" default="300" />

  <!-- Custom Arguments -->
  <arg name="controller_choice" default="1"/>  
  <!-- 1 = mpc -->
  <!-- 2 = rvo -->
  <!-- 3 = move_base -->
  <arg name="create_rosbag" default="false"/>
  <arg name="rosbag_name" default="$(arg scenario)_controller_$(arg controller_choice)" />
  <arg name="rviz" default="true"/>
  <arg name="pass_nogoal_option" default=""/>   <!-- Set to "" if goals should be set automatically -->
  <arg name="pass_pso_IfMoveBase" default=""/>   <!-- Set to "- -pre-step-once" if the move base planner is chosen. Fancy if doesn't seem to work.  -->

  <!-- Move base planner: sim -->
  <!-- (that's in interaction_actions) -->
  <!-- Launches 'ros_sim_node' and a 'map_server' node -->
  <!-- Additional arguments in move_base: - -delay-start - -pre-step-once - -shutdown-on-success - -max-runtime $(arg max_runtime)  -->
  <!-- "Delay start" ... by what?  -->
  <include file="$(find ia_ros)/launch/ros_sim_node.launch">
    <arg name="rviz" value="false" /> <!-- Better start it here, below, to keep the configuration.  -->
    <!--     <arg name="output" value="screen" /> -->    
    <arg name="output" value="log" />
    <arg name="mapname" value="$(arg mapname)" />
    <arg name="mapfolder" value="$(arg mapfolder)" />
    <arg name="script_args" 
      value="--cmd_vel --map-downsampling-passes $(arg ia_downsampling_passes) --realtime --scenario $(arg scenario) --plan-async --naive-plan --dt  0.05 --shutdown-on-success --max-runtime $(arg max_runtime) $(arg pass_nogoal_option) $(arg pass_pso_IfMoveBase)" /> 
  </include>

  <!-- Gmapping & Map Matching -->
  <include file="$(find asl_pepper_gmapping)/launch/gmapping.launch" if="$(arg localization)">
    <arg name="output" value="log"/>
  </include>
  <include file="$(find map_matcher)/launch/map_matcher.launch" if="$(arg localization)">
    <arg name="output" value="log" />
    <arg name="slam_map_topic" value="/gmap"/>
    <arg name="reference_map_name" value="$(arg mapname)"/>
    <arg name="maps_folder" value="$(arg mapfolder)"/>
    <arg name="launch_prefix" value="nice -n 20" />
  </include>
  <!-- Otherwise just publish reference map -->
  <node pkg="map_server" type="map_server" name="ref_map_server"
    args="$(arg mapfolder)/$(arg mapname).yaml" if="$(eval arg('localization') != true)">
    <param name="frame_id" value="reference_map" />
    <remap from="/map" to="/reference_map"/>
  </node>

  <!-- Global Path Planning -->
  <node pkg="asl_pepper_motion_planning" type="global_planner"
    name="global_planner" args="--hz" output="log" >
    <param name="reference_map_name" value="$(arg mapname)"/>
    <param name="reference_map_folder" value="$(arg mapfolder)"/>
    <param name="reference_map_downsampling_passes" value="$(arg n_downsampling_passes)" />
  </node>

  <!-- Framesoft tracking -->
  <include file="$(find rwth_crowdbot_launch)/launch/rwth_crowdbot_launch.launch" 
    if="$(eval arg('is_simulation') != true)">
  </include>

  <!-- Rosbag collection of data. Deprecated: Topics might need to be added or change to a simple 'rosbag record -a' equivalent-->
  <!-- Forum: Note on option: "Please note that if you pass "-o" instead of "-O" then it becomes only a prefix and not the full bag filename. In this case, the timestamp is then used as a suffix to build the full filename." -->
  <node pkg="rosbag" type="record" name="rosbag_record"
       args="record -o $(find asl_pepper_mpc_movement)/rosbags/$(arg rosbag_name) /pepper_robot/odom /global_planner/global_path /cmd_vel /mpc_movement/raw_mpc_data " 
        if="$(arg create_rosbag)">
  </node>

  <!-- Local RVIZ -->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(env HOME)/.rviz/rvo.rviz" 
    if="$(arg rviz)">
  </node>

  <!-- Panel with sliders for the weights etc. -->
  <node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure"
    if="$(eval arg('controller_choice') == 1)">
  </node>

    <!-- Device to guarantee safety (Emergency stop) -->
<!--   <node name="safety_device" pkg="asl_pepper_joystick" type="als_pepper_joystick_node">
  </node> -->
  <include file="$(find asl_pepper_joystick)/launch/joystick_control.launch" >
  </include>

    <!-- Detecting agents/people, strat for the live script. -->
<!--   <node pkg="dr_spaam_ros" type="node.py" name="dr_spaam_ros" output="screen">
    <rosparam command="load" file="$(find dr_spaam_ros)/config/dr_spaam_ros.yaml"/>
    <rosparam command="load" file="$(find dr_spaam_ros)/config/topics.yaml"/>
  </node> -->
  <node pkg="dr_spaam_ros" type="node.py" name="dr_spaam_ros" output="screen"
    if="$(arg dr_spaam_start)">
    <rosparam command="load" file="$(find asl_pepper_mpc_movement)/config/dr_spaam_ros.yaml"/>
    <rosparam command="load" file="$(find asl_pepper_mpc_movement)/config/dr_spaam_topics.yaml"/>
  </node>

  <!-- MPC Planner -->
  <!-- Versions: mpc_controller_cast_basicFunctionality -->
  <node pkg="asl_pepper_mpc_movement" type="asl_pepper_mpc_movement" name="mpc_movement" output="screen"
    args="$(arg script_args)"
    if="$(eval arg('controller_choice') == 1)">

    <rosparam command="load" file="$(find asl_pepper_mpc_movement)/config/controller_params.yaml"/>
  </node>

  <!-- RVO Planner -->
  <node pkg="asl_pepper_motion_planning" type="rvo_planner" name="rvo_planner" output="screen"
    args="$(arg script_args)"
    if="$(eval arg('controller_choice') == 2)">
    <!--     <param name="reference_map_name" value="$(arg mapname)"/> -->
    <!--     <param name="reference_map_folder" value="$(arg mapfolder)"/> -->
    <param name="reference_map_name" value="/gmap"/>
    <param name="reference_map_folder" value="rostopic"/>
    <param name="reference_map_frame" value="gmap"/>
    <param name="fixed_frame" value="odom"/>
    <param name="reference_map_downsampling_passes" value="1" />
    <param name="static_obstacles_max_distance" value="2" />
  </node>

  <!-- Move base planner: Convert obstacles -->
  <node pkg="asl_pepper_move_base" type="obstacles_converter" name="obstacles_converter" output="log" 
    if="$(eval arg('controller_choice') == 3)">
  </node>

  <!-- Move base planner: move_base -->
  <node pkg="move_base" type="move_base" respawn="true" name="move_base" output="screen" 
    if="$(eval arg('controller_choice') == 3)">
   <remap from="/map" to="sim_map"/>
   <rosparam file="$(find asl_pepper_mpc_movement)/params_moveBase/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
   <rosparam file="$(find asl_pepper_mpc_movement)/params_moveBase/costmap_common_params.yaml" command="load" ns="local_costmap" />
   <rosparam file="$(find asl_pepper_mpc_movement)/params_moveBase/local_costmap_params.yaml" command="load" />
   <rosparam file="$(find asl_pepper_mpc_movement)/params_moveBase/global_costmap_params_sim.yaml" command="load" /> 
   <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" />
   <param name="controller_frequency" value="10.0" />
   <rosparam file="$(find asl_pepper_mpc_movement)/params_moveBase/base_local_planner_params.yaml" command="load" />
  </node>

</launch>
