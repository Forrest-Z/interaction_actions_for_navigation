#!/usr/bin/env python
PACKAGE = "asl_pepper_mpc_movement"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# THESE DEFAULTS ARE OVERRIDDEN BY THE YAML ONES WHEN LOADING PARAM
gen.add("weight_pos", double_t, 0, "A double parameter", 1, 0, 20)
gen.add("weight_velo", double_t, 0, "A double parameter", 1, 0, 20)
gen.add("weight_turmoil", double_t, 0, "A double parameter", 0, 0, 20) # 0 default
gen.add("weight_turmoil_E", double_t, 0, "A double parameter", 1, 0, 20)
gen.add("weight_obst", double_t, 0, "A double parameter", 10, 0, 100)
gen.add("weight_agent", double_t, 0, "A double parameter", 5, 0, 50)
gen.add("weight_input", double_t, 0, "A double parameter", 1, 0, 20)

agentDetection_enum = gen.enum([ gen.const("disable",      int_t, 0, "Agents are assumed to be far away."),
                      gen.const("rwth_tracker",     int_t, 1, "Use the RWTH agent tracker. (Simulation only)"),
                      gen.const("dr_spaam",      int_t, 2, "Use the DR-SPAAM agent tracker. (Simulaton + real run)")],
                    "An enum to choose the agent detection method.")

gen.add("agent_detection", int_t, 0, "Choose the agent detection method.", 1, 0, 2, edit_method=agentDetection_enum)

# Default value via YAML file, gets applied, though, after any other panel update
gen.add("big_red_button", bool_t, 0, "STOP, sending an all-zero velocity command. Might show the wrong status if toggled by other means.",  True)

gen.add("SomeWeirdStringStuff", str_t, 0, "Whatevva", "TestEntry2")

# Third is the name of the generated header file (in the build tree!), match this* name to avoid recompilation
exit(gen.generate(PACKAGE, "asl_pepper_mpc_movement", "panel"))

# Add manual: 
# name - a string which specifies the name under which this parameter should be stored
# paramtype - defines the type of value stored, and can be any of int_t, double_t, str_t, or bool_t
# level - A bitmask which will later be passed to the dynamic reconfigure callback. When the callback is called all of the level values for parameters that have been changed are ORed together and the resulting value is passed to the callback.
# description - string which describes the parameter
# default - specifies the default value
# min - specifies the min value (optional and does not apply to strings and bools)
# max - specifies the max value (optional and does not apply to strings and bools) 